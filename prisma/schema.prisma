generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  firstName      String
  lastName       String
  username       String         @unique
  email          String         @unique
  password       String
  avatar         String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  
  // روابط
  conversations  UserConversation[]
  messages       Message[]       @relation("SentMessages")
  userRoles      UserRole[]
  groupMembers   GroupMember[]
  channelMembers ChannelMember[]
  readReceipts   ReadReceipt[]
  createdGroups  Group[]         @relation("GroupCreator")
  createdConvs   Conversation[]  @relation("ConversationCreator")
}

model Role {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  permissions RolePermission[]
  users       UserRole[]
}

model Permission {
  id          String     @id @default(uuid())
  code        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  roles       RolePermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())

  @@unique([roleId, permissionId])
}

model UserRole {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  userId    String
  roleId    String
  assignedAt DateTime @default(now())
  assignedBy String?  // User ID

  @@unique([userId, roleId])
}

model Conversation {
  id           String     @id @default(uuid())
  type         String     @default("PRIVATE")
  title        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  lastMessageAt DateTime?
  creator      User?      @relation("ConversationCreator", fields: [creatorId], references: [id])
  creatorId    String?
  participants UserConversation[]
  messages     Message[]
}

model UserConversation {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userId         String
  conversationId String
  createdAt      DateTime @default(now())

  @@unique([userId, conversationId])
}

model Group {
  id           String     @id @default(uuid())
  name         String
  description  String?
  avatar       String?
  isPublic     Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  lastMessageAt DateTime?
  creator      User       @relation("GroupCreator", fields: [creatorId], references: [id])
  creatorId    String
  members      GroupMember[]
  channels     Channel[]
  messages     Message[]
}

enum GroupRole {
  MEMBER
  MODERATOR
  ADMIN
  OWNER
}

model GroupMember {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  role      GroupRole @default(MEMBER)
  groupId   String
  userId    String
  joinedAt  DateTime @default(now())

  @@unique([groupId, userId])
}

model Channel {
  id           String     @id @default(uuid())
  name         String
  description  String?
  isPublic     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  lastMessageAt DateTime?
  group        Group      @relation(fields: [groupId], references: [id])
  groupId      String
  members      ChannelMember[]
  messages     Message[]
}

enum ChannelRole {
  MEMBER
  MODERATOR
  ADMIN
}

model ChannelMember {
  id        String   @id @default(uuid())
  channel   Channel  @relation(fields: [channelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  role      ChannelRole @default(MEMBER)
  channelId String
  userId    String
  joinedAt  DateTime @default(now())

  @@unique([channelId, userId])
}

model Message {
  id             String     @id @default(uuid())
  content        String
  type           String     @default("TEXT")
  sender         User       @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
  group          Group?     @relation(fields: [groupId], references: [id])
  groupId        String?
  channel        Channel?   @relation(fields: [channelId], references: [id])
  channelId      String?
  parent         Message?   @relation("MessageReplies", fields: [parentId], references: [id])
  parentId       String?
  replies        Message[]  @relation("MessageReplies") // این خط اضافه شد
  attachments    Attachment[]
  readReceipts   ReadReceipt[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  deletedAt      DateTime?
  isEdited       Boolean    @default(false)
}

model Attachment {
  id        String   @id @default(uuid())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  url       String
  fileName  String
  fileType  String
  fileSize  Int
  thumbnail String?
  createdAt DateTime @default(now())
}

model ReadReceipt {
  id        String   @id @default(uuid())
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  messageId String
  userId    String
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
}